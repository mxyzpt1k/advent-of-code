;;; Day 19: Aplenty
;;; Advent of Code 2023
;;; Tuesday, December 19, 2023

;;;       --------Part 1--------   --------Part 2--------
;;; Day       Time   Rank  Score       Time   Rank  Score
;;;  19   01:11:33   4510      0   18:06:40  13263      0

;;; part 1

(defvar day19-total 0)

(defvar day19-namespace (make-hash-table))

(defun define-rule (name body)
  (setf (gethash name day19-namespace) body))

(defun call-rule (name)
  (let ((rule (gethash name day19-namespace)))
    (funcall rule)))

(defun day19-accept ()
  (cl-incf day19-total (+ x m a s)))

(defun day19-reject ()
  t)

(defun day19-test-rule (x m a s)
  (let ((day19-total 0))
    (call-rule 'in)
    (< 0 day19-total)))

;;(day19-test-rule 185  1187 2544 357)

;; load code generated by day19-part1-convert.pl
;; (load "~/devel/advent-of-code/2023/day19.part1.gen.el")
;; (aoc-copy-output () day19-total)


;;; part 2

(defvar day19-accept-list ())

(defvar day19-reject-list ())

(defun trace19-eval (expr env)
  (cl-case (car expr)
    (reject (push (trace19-xmas-values env) day19-reject-list))
    (accept (push (trace19-xmas-values env) day19-accept-list))
    (apply  (let ((rule (gethash (cadr expr) day19-namespace)))
	      (trace19-eval rule env)))
    (if     (trace19-if (cdr expr) env))
    (otherwise (error "unknown expr: %s" expr))))

(defun trace19-if (expr env)
  (seq-let ((comp var num) then else) expr
    (let ((v (cdr (assoc var env))))
      (cond ((equal then else) (trace19-eval then env))
	     ((eq comp '<)
	     (cond ((< (cdr v) num)
		    (trace19-eval then env))
		   ((< (car v) num)
		    (trace19-eval then (cons (cons var (cons (car v) (1- num))) env))
		    (trace19-eval else (cons (cons var (cons num (cdr v))) env)))
		   (t (trace19-eval else env))))
	    (t (cond ((> (car v) num)
		      (trace19-eval then env))
		     ((> (cdr v) num)
		      (trace19-eval then (cons (cons var (cons (1+ num) (cdr v))) env))
		      (trace19-eval else (cons (cons var (cons (car v) num)) env)))
		     (t (trace19-eval else env))))))))

(defun trace19-xmas-values (env)
  (list (cdr (assoc 'x env))
	(cdr (assoc 'm env))
	(cdr (assoc 'a env))
	(cdr (assoc 's env))))

(defun trace19-init-env ()
  `((x 1 . 4000) (m 1 . 4000) (a 1 . 4000) (s 1 . 4000)))

(defun day19-compute-answer (list)
  (let ((count 0))
    (dolist (xmas list count)
      (cl-incf count (seq-reduce '* (mapcar (lambda (p) (1+ (- (cdr p) (car p)))) xmas) 1)))))

(defun day19-trace ()
  (let ((day19-accept-list ())
	(day19-reject-list ()))
    (let ((env (trace19-init-env)))
      (trace19-eval (gethash 'in day19-namespace) env)
      (day19-compute-answer day19-accept-list)
      ;;day19-accept-list
      )))

;; (load "~/devel/advent-of-code/2023/day19.part2.gen.el")
;; (aoc-copy-output () (day19-trace))


